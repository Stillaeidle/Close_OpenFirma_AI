name: Frontend Deploy

on:
  push:
    branches: [ main, release, dev ]
    paths:
      - 'frontend/**'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    # Set environment based on branch
    environment:
      ${{ github.ref == 'refs/heads/main' && 'production' || 
          github.ref == 'refs/heads/release' && 'staging' || 
          github.ref == 'refs/heads/dev' && 'development' }}
    
    defaults:
      run:
        working-directory: frontend
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
      
      # Add diagnostic step to find problematic imports
      - name: Check for invalid Html imports
        run: |
          echo "Checking for invalid Html imports..."
          grep -r "import.*Html.*from.*next/document" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | grep -v "_document\.[jt]sx\?"
          echo "Any files listed above have invalid imports of Html component"
        continue-on-error: true
        
      - name: Build with fallback
        run: |
          # Set standard NODE_ENV values based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            export NODE_ENV=production
            echo "Building with NODE_ENV=production"
          elif [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
            export NODE_ENV=production
            echo "Building with NODE_ENV=production (for staging)"
          else
            export NODE_ENV=production
            echo "Building with NODE_ENV=production (for development)"
          fi
          
          # Try to build, continue even if it fails
          npm run build || echo "Build failed, but continuing workflow"
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      
      # Skip deployment if build failed
      - name: Check if build succeeded
        id: build-check
        run: |
          if [ -d ".next" ]; then
            echo "Build succeeded, proceeding with deployment"
            echo "build-success=true" >> $GITHUB_OUTPUT
          else
            echo "Build failed, skipping deployment"
            echo "build-success=false" >> $GITHUB_OUTPUT
          fi
      
      # Deployment steps only if build succeeded
      - name: Deploy to environment
        if: steps.build-check.outputs.build-success == 'true'
        run: |
          echo "Deploying to ${{ github.ref == 'refs/heads/main' && 'production' || 
                                  github.ref == 'refs/heads/release' && 'staging' || 
                                  'development' }} environment"
          # Deployment code placeholder
      
      # Send notification with status
      - name: Notify deployment
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ steps.build-check.outputs.build-success == 'true' && 'good' || 'danger' }}
          SLACK_TITLE: "Frontend Deployment ${{ steps.build-check.outputs.build-success == 'true' && 'Succeeded' || 'Failed' }}"
          SLACK_MESSAGE: "${{ steps.build-check.outputs.build-success == 'true' && 'Successfully deployed to' || 'Build failed for' }} ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/release' && 'staging' || 'development' }} environment. Error: Html component imported outside _document.js"
          SLACK_FOOTER: 'Deployed from ${{ github.repository }}'
