name: Deploy

on:
  push:
    branches: [ main, release, dev ]
    paths:
      - 'frontend/**'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    # Set environment based on branch
    environment:
      ${{ github.ref == 'refs/heads/main' && 'production' || 
          github.ref == 'refs/heads/release' && 'staging' || 
          github.ref == 'refs/heads/dev' && 'development' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          # No caching option at all

      # Change directory first, then do all operations in a single step
      - name: Build frontend application
        run: |
          cd frontend
          npm install
          
          # Set NODE_ENV based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            export NODE_ENV=production
          elif [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
            export NODE_ENV=staging
          else
            export NODE_ENV=development
          fi
          
          echo "Building with NODE_ENV=$NODE_ENV"
          npm run build
      
      # Deployment steps would go here
      # Make sure deployment commands also use the cd frontend approach
      # For example:
      
      # - name: Deploy to production (example)
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     cd frontend
      #     # Deploy command for production
      
      # - name: Deploy to staging (example)
      #   if: github.ref == 'refs/heads/release'
      #   run: |
      #     cd frontend
      #     # Deploy command for staging
      
      # - name: Deploy to development (example)
      #   if: github.ref == 'refs/heads/dev'
      #   run: |
      #     cd frontend
      #     # Deploy command for development
