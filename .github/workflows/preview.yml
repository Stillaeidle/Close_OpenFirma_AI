name: PR Preview

permissions:
  contents: read
  pull-requests: write
  deployments: write

on:
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened, closed]
    paths:
      - 'frontend/**'

jobs:
  preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    
    # Only deploy if PR is open
    if: github.event.action != 'closed'
    
    environment: pr-preview
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Build for static export
        working-directory: frontend
        run: |
          export NODE_ENV=production
          npm run build
          
      - name: Debug - Check build output
        working-directory: frontend
        run: |
          echo "Contents of build directory:"
          ls -la out || echo "out directory not found"
          
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
        
      - name: Deploy to Netlify
        working-directory: frontend
        run: |
          echo "Starting Netlify deployment..."
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Base Ref: ${{ github.base_ref }}"
          echo "Head Ref: ${{ github.head_ref }}"
          
          # Verify the out directory exists
          if [ ! -d "out" ]; then
            echo "Error: 'out' directory not found!"
            exit 1
          fi
          
          netlify deploy \
            --dir=out \
            --site="${{ secrets.NETLIFY_SITE_ID }}" \
            --auth="${{ secrets.NETLIFY_AUTH_TOKEN }}" \
            --message="PR #${{ github.event.pull_request.number }} preview" \
            --alias="pr-${{ github.event.pull_request.number }}" \
            --json > deploy_output.json
            
          DEPLOY_URL=$(cat deploy_output.json | jq -r '.deploy_url')
          echo "Deploy URL: $DEPLOY_URL"
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      
      - name: Comment on PR
        if: steps.deploy.outputs.deploy_url
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployUrl = '${{ steps.deploy.outputs.deploy_url }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ PR Preview deployed to: [Netlify Preview](${deployUrl})`
            });

  cleanup:
    name: Cleanup PR Preview
    runs-on: ubuntu-latest
    
    # Only run when PR is closed (includes merged)
    if: github.event.action == 'closed'
    
    steps:
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
        
      - name: Delete Netlify Preview Deployment
        run: |
          echo "Cleaning up preview deployment for PR #${{ github.event.pull_request.number }}..."
          
          # First, list deploys to find the one with our alias
          DEPLOYS=$(netlify api listSiteDeploys \
            --data '{"site_id":"${{ secrets.NETLIFY_SITE_ID }}"}')
          
          # Find the deploy with our alias
          DEPLOY_ID=$(echo $DEPLOYS | jq -r '.[] | select(.deploy_ssl_url | contains("pr-${{ github.event.pull_request.number }}")) | .id')
          
          if [ -n "$DEPLOY_ID" ]; then
            echo "Found deployment ID: $DEPLOY_ID"
            
            # Delete the deployment
            netlify api deleteSiteDeploy \
              --data "{\"site_id\":\"${{ secrets.NETLIFY_SITE_ID }}\", \"deploy_id\":\"$DEPLOY_ID\"}"
            
            echo "Preview deployment deleted successfully"
          else
            echo "No matching deployment found to delete"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ§¹ Preview deployment has been cleaned up.`
            });